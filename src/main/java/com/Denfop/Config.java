package com.Denfop;

import java.io.File;

import com.google.common.collect.Sets;

import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.GameData;
import java.util.Set;
import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraftforge.common.config.Configuration;

public class Config {
	public static final boolean EnglishFix = false;
	public static double SolidMatterStorage;
	public static boolean EnableNetherOres;
	public static int limit;
	public static int tier;
	public static int coefficientrf;
	public static double neutrongenday;
	public static double neutronGenNight;
	public static double neutronStorage;
	public static double neutronOutput;
	public static double InfinityGenNight;
	public static double InfinityGenDay;
	public static double InfinityOutput;
	public static double InfinityStorage;
	public static int manasteeltier;
	public static double manasteeloutput;
	public static double manasteelstorage;
	public static double manasteelgennight;
	public static double manasteelgenday;
	public static double elementiumstorage;
	public static double elementiumgenday;
	public static double elementiumgennight;
	public static double elementiumoutput;
	public static int elementiumtier;
	public static double terasteelgenday;
	public static double terasteelgennight;
	public static double terasteelstorage;
	public static double terasteeloutput;
	public static int terasteeltier;
	public static double chaosgenday;
	public static double chaosgennight;
	public static double chaosstorage;
	public static double chaosoutput;
	public static int chaostier;
	public static int awakenedtier;
	public static double awakenedoutput;
	public static double awakenedstorage;
	public static double awakenedgennight;
	public static double awakenedgenday;
	public static int draconictier;
	public static double draconicoutput;
	public static double draconicstorage;
	public static double draconicgennight;
	public static double draconicgenday;
	public static boolean ASP;
	public static int toriyRodCells;
	public static int toriyRodHeat;
	public static float toriyPower;
	public static File configFile;
	public static boolean registerDraconicPanels;
	public static boolean registerChaosArmour;
	public static boolean registerChaosFluxCapacitor;
	public static boolean registerChaosAxe;
	public static boolean registerChaosBow;
	public static boolean registerChaosSword;
	public static boolean registerChaosShovel;
	public static boolean registerChaosPickaxe;
	public static boolean registerChaosDestructionStaff;
	public static boolean nightvision;
	public static float effPower;
	public static float bigHolePower;
	public static int spectralsaberactive;
	public static int spectralsabernotactive;
	public static int Storagequantumsuit;
	public static double neutronpanelGenDay;
	public static double neutronpanelOutput;
	public static double neutronpanelGenNight;
	public static double neutronpanelStorage;
	public static int Radius3;
	public static int durability3;
	public static int efficiency3;
	public static int minWindStrength3;
	public static int maxWindStrength3;
	public static int Radius4;
	public static int durability4;
	public static int efficiency4;
	public static int minWindStrength4;
	public static int maxWindStrength4;
	public static int Radius5;
	public static int durability5;
	public static int efficiency5;
	public static int maxWindStrength5;
	public static int minWindStrength5;
	public static double protonOutput;
	public static double protontier;
	public static double protongenDay;
	public static double protongennitht;
	public static boolean wireless;
	public static int spectralsaber;
	public static int spectralsaber1;
	public static int enegry1;
	public static int storage1;
	public static int tier1;
	public static double energy;
	public static int enegry2;
	public static int storage2;
	public static int tier2;
	public static boolean disableeffect;
	public static boolean disableeffect1;
	public static boolean disableeffect2;
	public static boolean disableeffect3;
	public static boolean disableeffect4;
	public static boolean disableeffect5;
	public static boolean disable;
	public static boolean disable1;
	public static boolean disable2;
	public static boolean disable3;
	public static boolean disable4;
	public static float lowPower;
	public static float ultraLowPower;
	public static int ultdrillmaxCharge;
	public static int ultdrilltier;
	public static int energyPerOperation;
	public static int energyPerLowOperation;
	public static int energyPerultraLowPowerOperation;
	public static int energyPerbigHolePowerOperation;
	public static int ultdrilltransferLimit;
	public static boolean enableefficiency;
	public static int efficiencylevel;
	public static double advGenDay;
	public static boolean AvaritiaLoaded;
	public static boolean BotaniaLoaded;
	public static boolean AE2Loaded;
	public static boolean Draconic;
	public static boolean Botania;
	public static boolean Avaritia;
	public static boolean enableefficiency1;
	public static int efficiencylevel1;
	public static boolean enablesilkTouch;
	public static boolean enablefortune;
	public static int fortunelevel;
	public static boolean enableexlposion;
	public static boolean enableIC2EasyMode;
	public static boolean EnableEndOres;
	public static boolean EnableMickailOre;
	public static boolean EnableSpinelOre;
	public static boolean EnablePlatiumOre;
	public static boolean EnableWolframOre;
	public static boolean EnableChromiumOre;
	public static boolean EnableIridiumOre;
	public static boolean EnableMagnesiumOre;
	public static boolean EnableNickelOre;
	public static boolean EnableToriyOre;
	public static boolean EnableMagnetitOre;
	public static boolean damagecable;
	public static boolean newsystem;
	public static int armor_maxcharge;
	public static int armor_transferlimit;
	public static int armor_tier;
	public static int armor_maxcharge_body;
	public static int percent_output;
	public static int percent_storage;
	public static int percent_day;
	public static int percent_night;
	public static double spectralpanelGenDay;
	public static double spectralpanelGenNight;
	public static double singularpanelGenDay;
	public static double singularpanelOutput;
	public static double spectralpanelOutput;
	public static double singularpanelGenNight;
	public static double adminpanelGenDay;
	public static double adminpanelGenNight;
	public static double AdminpanelStorage;
	public static double AdminpanelOutput;
	public static double photonicpanelGenDay;
	public static double photonicpanelGenNight;
	public static double photonicpanelOutput;
	public static double photonicpanelStorage;
	public static int tier2_MFSU;
	public static int tier_Saber;
	public static int tier3_MFSU;
	public static double singularpanelstorage;
	public static int singularpaneltier;
	public static int spectralpaneltier;
	public static int adminpaneltier;
	public static int photonicpaneltier;
	public static int neutronpaneltier;
	public static boolean thaumcraft;
	public static double advGenNight;
	public static double advStorage;
	public static double advOutput;
	public static double hGenDay;
	public static double hGenNight;
	public static double hStorage;
	public static double hOutput;
	public static double uhGenDay;
	public static double uhGenNight;
	public static double uhStorage;
	public static double uhOutput;
	public static double qpGenDay;
	public static double qpGenNight;
	public static double qpStorage;
	public static double qpOutput;
	public static int qgbaseProduction;
	public static int qgbaseMaxPacketSize;
	public static double spectralpanelstorage;
	public static boolean disableAdvancedSolarHelmetRecipe;
	public static boolean disableHybridSolarHelmetRecipe;
	public static boolean disableUltimateSolarHelmetRecipe;
	public static boolean disableAdvancedSolarPanelRecipe;
	public static boolean disableHybridSolarPanelRecipe;
	public static boolean disableUltimateSolarPanelRecipe;
	public static boolean disableQuantumSolarPanelRecipe;
	public static boolean disableMolecularTransformerRecipe;
	public static boolean disableDoubleSlabRecipe;
	public static boolean enableSimpleAdvancedSolarPanelRecipes;
	public static boolean enableHardRecipes;
	public static int maxCharge;
	public static int transferLimit;
	public static boolean EnchantingPlus;
	public static boolean MineFactory;
	public static boolean EnableEnchantingPlus;
	public static boolean EnableMineFactory;
	public static int Radius;
	public static int durability;
	public static int efficiency;
	public static int minWindStrength;
	public static int maxWindStrength;
	public static int Radius1;
	public static int durability1;
	public static int efficiency1;
	public static int minWindStrength1;
	public static int maxWindStrength1;
	public static int Radius2;
	public static int durability2;
	public static int efficiency2;
	public static int minWindStrength2;
	public static int maxWindStrength2;
	public static int MaxChangesaber;
	public static int transferLimitsaber;
	public static int tiersaber;
	public static int Quantumsaberactive;
	public static int Quantumsabernotactive;
	public static boolean Streak;
	public static int TerrasteelRodCells;
	public static int TerrasteelRodHeat;
	public static float TerrasteelPower;
	public static int ProtonRodHeat;
	public static int ProtonRodCells;
	public static float ProtonPower;
	public static boolean DraconicLoaded;
	public static int spectralsaberactive1;
	public static int spectralsabernotactive1;
	public static int maxCharge1;
	public static int transferLimit1;
	public static String configFileName;
	public static int storage_limit;

	public static double molecular;
	public static double molecular1;
	public static double molecular2;
	public static double molecular3;
	public static double molecular4;
	public static double molecular5;
	public static double molecular6;
	public static double molecular7;
	public static double molecular8;
	public static double molecular9;
	public static double molecular10;
	public static double molecular11;
	public static double molecular12;
	public static double molecular13;
	public static double molecular14;
	public static double molecular15;
	public static double molecular16;
	public static double molecular17;
	public static double molecular18;
	public static double molecular19;
	public static double molecular20;
	public static double molecular21;
	public static double molecular22;
	public static double molecular23;
	public static double molecular24;
	public static double molecular25;
	public static double molecular26;
	public static double molecular27;
	public static double molecular28;
	public static double molecular29;
	public static double molecular30;
	public static double molecular31;
	public static double molecular32;
	public static double molecular33;
	public static double molecular34;
	public static double molecular35;
	public static int enerycost;
	public static int expstorage;
	public static boolean recipemolecular;
	public static boolean recipemolecular1;
	public static boolean recipemolecular2;
	public static boolean recipemolecular3;
	public static boolean recipemolecular4;
	public static boolean recipemolecular5;
	public static boolean recipemolecular6;
	public static boolean recipemolecular7;
	public static boolean recipemolecular9;
	public static boolean recipemolecular8;
	public static boolean recipemolecular10;
	public static boolean recipemolecular11;
	public static boolean recipemolecular12;
	public static boolean recipemolecular13;
	public static boolean recipemolecular14;
	public static boolean recipemolecular15;
	public static boolean recipemolecular16;
	public static boolean recipemolecular17;
	public static boolean recipemolecular18;
	public static boolean recipemolecular19;
	public static boolean recipemolecular20;
	public static boolean recipemolecular21;
	public static boolean recipemolecular22;
	public static boolean recipemolecular23;
	public static boolean recipemolecular24;
	public static boolean recipemolecular25;
	public static boolean recipemolecular26;
	public static boolean recipemolecular27;
	public static boolean recipemolecular28;
	public static boolean recipemolecular29;
	public static boolean recipemolecular30;
	public static boolean recipemolecular31;
	public static boolean recipemolecular32;
	public static boolean recipemolecular33;
	public static boolean recipemolecular34;
	public static boolean recipemolecular35;
	public static boolean recipemolecular36;

	public static double molecular36;
	public static int energyPerultraLowPowerOperation1;
	public static int ultraLowPower1;
	public static boolean promt;

	public static void config(final FMLPreInitializationEvent event) {
		configFile = event.getSuggestedConfigurationFile();
		 Configuration config = new Configuration(configFile);
		try {
			config.load();
			
			expstorage = config.get("Basic Mechanisms", "exp storage", 500).getInt(500);
			enerycost = config.get("Quantum Querry", "energy consume", 55000).getInt(55000);
			coefficientrf=config.get("general", "coefficient rf", 4).getInt(4);
			if(coefficientrf < 1)
				coefficientrf =4;
			molecular = config.get("Crafts Molecular Transformer", "Wither Skeleton skull", 4000000D).getDouble(4000000D);
			molecular1 = config.get("Crafts Molecular Transformer", "Nether Star", 250000000D).getDouble(250000000D);
			molecular2 = config.get("Crafts Molecular Transformer", "Iridium Ore", 10000000D).getDouble(10000000D);
			molecular3 = config.get("Crafts Molecular Transformer", "Proton", 15500000D).getDouble(15500000D);
			molecular4 = config.get("Crafts Molecular Transformer", "Iridium ingot", 2500000D).getDouble(2500000D);
			molecular5 = config.get("Crafts Molecular Transformer", "Photon ingot", 12000000D).getDouble(12000000D);
			molecular6 = config.get("Crafts Molecular Transformer", "Gunpowder", 70000D).getDouble(70000D);
			molecular7 = config.get("Crafts Molecular Transformer", "Gravel", 45000D).getDouble(45000D);
			molecular8 = config.get("Crafts Molecular Transformer", "Diamond", 1000000D).getDouble(1000000D);
			molecular9 = config.get("Crafts Molecular Transformer", "Nickel ingot", 450000D).getDouble(450000D);
			molecular10 = config.get("Crafts Molecular Transformer", "Gold ingot", 450000D).getDouble(450000D);
			molecular11 = config.get("Crafts Molecular Transformer", "Silver ingot", 800000D).getDouble(800000D);
			molecular12 = config.get("Crafts Molecular Transformer", "Tungsten ingot", 700000D).getDouble(700000D);
			molecular13 = config.get("Crafts Molecular Transformer", "Spinel ingot", 800000D).getDouble(800000D);
			molecular14 = config.get("Crafts Molecular Transformer", "Mikhalov ingot", 900000D).getDouble(900000D);
			molecular15 = config.get("Crafts Molecular Transformer", "Chromium ingot", 600000D).getDouble(600000D);
			molecular16 = config.get("Crafts Molecular Transformer", "Platium ingot", 800000D).getDouble(800000D);
			molecular17 = config.get("Crafts Molecular Transformer", "Advanced ingot", 1500D).getDouble(1500D);
			molecular18 = config.get("Crafts Molecular Transformer", "Hybrid core", 11720D).getDouble(11720D);
			molecular19 = config.get("Crafts Molecular Transformer", "Ultimate core", 60000D).getDouble(60000D);
			molecular20 = config.get("Crafts Molecular Transformer", "Quantum core", 300000D).getDouble(300000D);
			molecular21 = config.get("Crafts Molecular Transformer", "Spectral core", 1500000D).getDouble(1500000D);
			molecular22 = config.get("Crafts Molecular Transformer", "Proton core", 7500000D).getDouble(7500000D);
			molecular23 = config.get("Crafts Molecular Transformer", "Singular core", 45000000D).getDouble(45000000D);
			molecular24 = config.get("Crafts Molecular Transformer", "Diffraction core", 180000000D).getDouble(180000000D);
			molecular25 = config.get("Crafts Molecular Transformer", "Photnic core", 900000000D).getDouble(900000000D);
			molecular26 = config.get("Crafts Molecular Transformer", "Sintezator", 15000000000D).getDouble(15000000000D);
			molecular27 = config.get("Crafts Molecular Transformer", "Sun lense", 25000000D).getDouble(25000000D);
			molecular28 = config.get("Crafts Molecular Transformer", "Rain lense", 25000000D).getDouble(25000000D);
			molecular29 = config.get("Crafts Molecular Transformer", "Nether lense", 25000000D).getDouble(25000000D);
			molecular30 = config.get("Crafts Molecular Transformer", "Night lense", 25000000D).getDouble(25000000D);
			molecular31 = config.get("Crafts Molecular Transformer", "Earth lense", 25000000D).getDouble(25000000D);
			molecular32 = config.get("Crafts Molecular Transformer", "End lense", 25000000D).getDouble(25000000D);
			molecular33 = config.get("Crafts Molecular Transformer", "Aer lense", 25000000D).getDouble(25000000D);
			molecular34 = config.get("Crafts Molecular Transformer", "Photon", 1450000D).getDouble(1450000D);
			molecular35 = config.get("Crafts Molecular Transformer", "Magnesium ingot", 700000D).getDouble(700000D);
			molecular36 = config.get("Crafts Molecular Transformer", "Caravkiy ingot", 900000D).getDouble(900000D);
			promt = config.get("general", "Enable prompt about infomation a panel", true).getBoolean(true);
			recipemolecular = config.get("Enable Crafts Molecular Transformer", "Wither Skeleton skull", true).getBoolean(true);
			recipemolecular1 = config.get("Enable Crafts Molecular Transformer", "Nether Star", true).getBoolean(true);
			recipemolecular2 = config.get("Enable Crafts Molecular Transformer", "Iridium Ore", true).getBoolean(true);
			recipemolecular3 = config.get("Enable Crafts Molecular Transformer", "Proton", true).getBoolean(true);
			recipemolecular4 = config.get("Enable Crafts Molecular Transformer", "Iridium ingot", true).getBoolean(true);
			recipemolecular5 = config.get("Enable Crafts Molecular Transformer", "Photon ingot", true).getBoolean(true);
			recipemolecular6 = config.get("Enable Crafts Molecular Transformer", "Gunpowder", true).getBoolean(true);
			recipemolecular7 = config.get("Enable Crafts Molecular Transformer", "Gravel", true).getBoolean(true);
			recipemolecular8 = config.get("Enable Crafts Molecular Transformer", "Diamond", true).getBoolean(true);
			recipemolecular9 = config.get("Enable Crafts Molecular Transformer", "Nickel ingot", true).getBoolean(true);
			recipemolecular10 = config.get("Enable Crafts Molecular Transformer", "Gold ingot", true).getBoolean(true);
			recipemolecular11 = config.get("Enable Crafts Molecular Transformer", "Silver ingot", true).getBoolean(true);
			recipemolecular12 = config.get("Enable Crafts Molecular Transformer", "Tungsten ingot", true).getBoolean(true);
			recipemolecular13 = config.get("Enable Crafts Molecular Transformer", "Spinel ingot", true).getBoolean(true);
			recipemolecular14 = config.get("Enable Crafts Molecular Transformer", "Mikhalov ingot", true).getBoolean(true);
			recipemolecular15 = config.get("Enable Crafts Molecular Transformer", "Chromium ingot", true).getBoolean(true);
			recipemolecular16 = config.get("Enable Crafts Molecular Transformer", "Platium ingot", true).getBoolean(true);
			recipemolecular17 = config.get("Enable Crafts Molecular Transformer", "Advanced ingot", true).getBoolean(true);
			recipemolecular18 = config.get("Enable Crafts Molecular Transformer", "Hybrid core", true).getBoolean(true);
			recipemolecular19 = config.get("Enable Crafts Molecular Transformer", "Ultimate core", true).getBoolean(true);
			recipemolecular20 = config.get("Enable Crafts Molecular Transformer", "Quantum core", true).getBoolean(true);
			recipemolecular21 = config.get("Enable Crafts Molecular Transformer", "Spectral core", true).getBoolean(true);
			recipemolecular22 = config.get("Enable Crafts Molecular Transformer", "Proton core", true).getBoolean(true);
			recipemolecular23 = config.get("Enable Crafts Molecular Transformer", "Singular core", true).getBoolean(true);
			recipemolecular24 = config.get("Enable Crafts Molecular Transformer", "Difraction core", true).getBoolean(true);
			recipemolecular25 = config.get("Enable Crafts Molecular Transformer", "Photnic core", true).getBoolean(true);
			recipemolecular26 = config.get("Enable Crafts Molecular Transformer", "Sintezator", true).getBoolean(true);
			recipemolecular27 = config.get("Enable Crafts Molecular Transformer", "Sun lense", true).getBoolean(true);
			recipemolecular28 = config.get("Enable Crafts Molecular Transformer", "Rain lense", true).getBoolean(true);
			recipemolecular29 = config.get("Enable Crafts Molecular Transformer", "Nether lense", true).getBoolean(true);
			recipemolecular30 = config.get("Enable Crafts Molecular Transformer", "Night lense", true).getBoolean(true);
			recipemolecular31 = config.get("Enable Crafts Molecular Transformer", "Earth lense", true).getBoolean(true);
			recipemolecular32 = config.get("Enable Crafts Molecular Transformer", "End lense", true).getBoolean(true);
			recipemolecular33 = config.get("Enable Crafts Molecular Transformer", "Aer lense", true).getBoolean(true);
			recipemolecular34 = config.get("Enable Crafts Molecular Transformer", "Photon", true).getBoolean(true);
			recipemolecular35 = config.get("Enable Crafts Molecular Transformer", "Magnesium ingot", true).getBoolean(true);
			recipemolecular36 = config.get("Enable Crafts Molecular Transformer", "Caravkiy ingot", true).getBoolean(true);
			SolidMatterStorage = config.get("Solid Matter Generator Storage", "Matter Generator Storage", 5E8D).getDouble(5E8D);
			storage_limit = config.get("Module", "Limit in energy storage", 2).getInt(2);
			damagecable = config.get("Events", "Damage", true).getBoolean(true);
			newsystem = config.get("Events", "New system transfer energy", true).getBoolean(true);
			EnableMagnetitOre = config.get("Generation", "Spawn Magnetit Ore", true).getBoolean(true);
			EnableToriyOre = config.get("Generation", "Spawn Toriy Ore", true).getBoolean(true);
			EnableNickelOre = config.get("Generation", "Spawn Nickel Ore", true).getBoolean(true);
			EnableMagnesiumOre = config.get("Generation", "Spawn Magnesium Ore", true).getBoolean(true);
			EnableIridiumOre = config.get("Generation", "Spawn Iridium Ore", true).getBoolean(true);
			EnableChromiumOre = config.get("Generation", "Spawn Chromium Ore", true).getBoolean(true);
			EnableWolframOre = config.get("Generation", "Spawn Wolfram Ore", true).getBoolean(true);
			EnablePlatiumOre = config.get("Generation", "Spawn Platium Ore", true).getBoolean(true);
			EnableSpinelOre = config.get("Generation", "Spawn Spinel Ore", true).getBoolean(true);
			EnableMickailOre = config.get("Generation", "Spawn Mickail Ore", true).getBoolean(true);
			effPower = config.get("UltimateDrill", "Mode 0 efficiency", 35).getInt(35);
			lowPower = config.get("UltimateDrill", "Mode 1 efficiency", 20).getInt(20);
			bigHolePower = config.get("UltimateDrill", "Mode 2 efficiency", 16).getInt(16);
			ultraLowPower = config.get("UltimateDrill", "Mode 3 efficiency", 12).getInt(12);
			ultraLowPower1 = config.get("UltimateDrill", "Mode 4 efficiency", 10).getInt(10);
			ultdrillmaxCharge = config.get("UltimateDrill", "maxCharge", 15000000).getInt(15000000);
			ultdrilltier = config.get("UltimateDrill", "tier", 2).getInt(2);
			ultdrilltransferLimit = config.get("UltimateDrill", "transfer Limit", 500).getInt(500);
			energyPerOperation = config.get("UltimateDrill", "energyPerOperation", 160).getInt(160);
			energyPerLowOperation = config.get("UltimateDrill", "energyPerLowOperation", 80).getInt(80);
			energyPerbigHolePowerOperation = config.get("UltimateDrill", "energyPerBigHolesOperation (3x3)", 300).getInt(300);
			energyPerultraLowPowerOperation = config.get("UltimateDrill", "energyPerUltraBigHolesOperation (5x5)", 500).getInt(500);
			energyPerultraLowPowerOperation1 = config.get("UltimateDrill", "energyPerUltraBigHolesOperation (7x7)", 700).getInt(700);
			enableefficiency = config.get("UltimateDrill", "Enable Efficiency tool mode 0", true).getBoolean(true);
			if (efficiencylevel > 1 && efficiencylevel < 15) {
				efficiencylevel = config.get("UltimateDrill", "Level efficiency(tool mode 0)", 10).getInt(10);
			} else {
				efficiencylevel = 10;
			}
			EnableNetherOres = config.get("Generation", "Spawn ores in Nether", true).getBoolean(true);
			EnableEndOres = config.get("Generation", "Spawn ores in End", true).getBoolean(true);
			enableIC2EasyMode = config.get("general", "Easy Mode", false).getBoolean(false);
			enableexlposion = config.get("Events", "Enable exlposion", true).getBoolean(true);
			enableefficiency = config.get("UltimateDrill", "Enable Efficiency tool mode 1", true).getBoolean(true);
			if (efficiencylevel1 > 1 && efficiencylevel1 < 15) {
				efficiencylevel1 = config.get("UltimateDrill", "Level efficiency(tool mode 1)", 10).getInt(10);
			} else {
				efficiencylevel1 = 10;
			}
			enablesilkTouch = config.get("UltimateDrill", "Enable silk Touch tool mode 2", true).getBoolean(true);
			enablefortune = config.get("UltimateDrill", "Enable fortune tool mode 3", true).getBoolean(true);
			if (fortunelevel > 1 && fortunelevel < 10) {
				fortunelevel = config.get("UltimateDrill", "Level fortune(tool mode 3)", 5).getInt(5);
			} else {
				fortunelevel = 5;
			}
			protongenDay = config.get("Proton Solar panel", "ProtonGenDay", 31250D).getDouble(31250D);
			protongennitht = config.get("Proton Solar panel", "ProtonGenNight", 15625D).getDouble(15625D);
			protonOutput = config.get("Proton Solar panel", "ProtonOutput", 62500D).getDouble(62500D);
			protontier = config.get("Proton Solar panel", "Protonstorage", 50000000D).getDouble(50000000D);
			spectralpanelGenDay = config.get("Spectral Solar panel", "SpectralSPGenDay", 6250D).getDouble(6250D);
			spectralpanelGenNight = config.get("Spectral Solar panel", "SpectralSPGenNight", 3125D).getDouble(3125D);
			spectralpanelOutput = config.get("Spectral Solar panel", "SpectralSPOutput", 12500D).getDouble(12500D);
			spectralpanelstorage = config.get("Spectral Solar panel", "Spectral Solar panel Storage", 5000000D).getDouble(5000000D);
			singularpanelGenDay = config.get("Singular Solar panel", "SingularSPGenDay", 156250D).getDouble(156250D);
			singularpanelGenNight = config.get("Singular Solar panel", "SingularSPGenNight", 78125D).getDouble(78125D);
			singularpanelOutput = config.get("Singular Solar panel", "SingularSPOutput", 312500D).getDouble(312500D);
			singularpanelstorage = config.get("Singular Solar panel", "SingularSPStorage", 1000000000D).getDouble(1000000000D);
			adminpanelGenDay = config.get("Light-Adbord Solar panel", "AdminPanelGenDay", 781250D).getDouble(781250D);
			adminpanelGenNight = config.get("Light-Adbord Solar panel", "AdminPanelGenNight", 781250D).getDouble(781250D);
			AdminpanelStorage = config.get("Light-Adbord Solar panel", "AdminPanelStorage", 5000000000D).getDouble(5000000000D);
			AdminpanelOutput = config.get("Light-Adbord Solar panel", "AdminPanelOutput", 1562500D).getDouble(1562500D);
			photonicpanelGenDay = config.get("Photonic Solar panel", "PhotonicPanelGenDay", 3906250D).getDouble(3906250D);
			photonicpanelGenNight = config.get("Photonic Solar panel", "PhotonicPanelGenNight", 3906250D).getDouble(3906250D);
			photonicpanelOutput = config.get("Photonic Solar panel", "PhotonicPanelOutput", 7812500D).getDouble(7812500D);
			photonicpanelStorage = config.get("Photonic Solar panel", "PhotonicPanelStorage", 15000000000D).getDouble(15000000000D);
			neutronpanelGenDay = config.get("Neutronium Solar panel", "NeutronPanelGenDay", 19631250).getDouble(19631250D);
			neutronpanelGenNight = config.get("Neutronium Solar panel", "NeutronPanelGenNight", 19631250D).getDouble(19631250D);
			neutronpanelOutput = config.get("Neutronium Solar panel", "NeutronPanelOutput", 39062500D).getDouble(39062500D);
			neutronpanelStorage = config.get("Neutronium Solar panel", "NeutronPanelStorage", 65000000000D).getDouble(65000000000D);
			spectralsaberactive1 = config.get("Quantum Saber", "QuantumSaber Damage Active", 40).getInt(40);
			spectralsabernotactive1 = config.get("Quantum Saber", "QuantumSaber Damage Not Active", 8).getInt(8);
			maxCharge1 = config.get("Quantum Saber", "SpectralSaber max Charge", 200000).getInt(200000);
			transferLimit1 = config.get("Quantum Saber", "SpectralSaber transfer Limit", 15000).getInt(20000);
			tier1 = config.get("Quantum Saber", "SpectralSaber tier", 4).getInt(4);
			energy = config.get("Neutronium generator", "Consumes energy to make 1 mb neutronim", 656250000.0D).getDouble(656250000.0D);
			maxCharge = config.get("Spectral Saber", "SpectralSaber max Charge", 600000).getInt(300000);
			transferLimit = config.get("Spectral Saber", "SpectralSaber transfer Limit", 40000).getInt(20000);
			tier_Saber = config.get("Spectral Saber", "SpectralSaber tier", 5).getInt(5);
			spectralsaberactive = config.get("Spectral Saber", "SpectralSaber Damage Active", 60).getInt(60);
			spectralsabernotactive = config.get("Spectral Saber", "SpectralSaber Damage Not Active", 12).getInt(12);
			enegry1 = config.get("Imroved MFSU", "energy transfer Et/t", 32768).getInt(32768);
			storage1 = config.get("Imroved MFSU", "energy storage", 100000000).getInt(100000000);
			tier2_MFSU = config.get("Imroved MFSU", "tier", 5).getInt(5);
			enegry2 = config.get("Advanced MFSU", "energy transfer Et/t", 242144).getInt(242144);
			storage2 = config.get("Advanced MFSU", "energy storage", 400000000).getInt(400000000);
			tier2 = config.get("Advanced MFSU", "tier", 6).getInt(6);
			singularpaneltier = config.get("Singular Solar panel", "tier", 7).getInt(7);
			spectralpaneltier = config.get("Spectral Solar panel", "tier", 5).getInt(5);
			adminpaneltier = config.get("Light-Adbord Solar panel", "tier", 8).getInt(8);
			photonicpaneltier = config.get("Photonic Solar panel", "tier", 9).getInt(9);
			neutronpaneltier = config.get("Neutronium Solar panel", "tier", 10).getInt(10);
			InfinityGenDay = config.get("Infinity Solar panel", "GenDay", 1048576D).getDouble(1048576D);
			InfinityGenNight = config.get("Infinity Solar panel", "GenNight", 1048576D).getDouble(1048576D);
			InfinityOutput = config.get("Infinity Solar panel", "Output", 2097152D).getDouble(2097152D);
			InfinityStorage = config.get("Infinity Solar panel", "Storage", 30000000D).getDouble(30000000D);
			tier = config.get("Neutron Solar panel(Avaritia)", "tier", 8).getInt(8);
			neutrongenday = config.get("Neutron Solar panel(Avaritia)", "GenDay", 1310720D).getDouble(1310720D);
			neutronGenNight = config.get("Neutron Solar panel(Avaritia)", "GenNight", 1310720D).getDouble(1310720D);
			neutronOutput = config.get("Neutron Solar panel(Avaritia)", "Output", 2621440D).getDouble(2621440D);
			neutronStorage = config.get("Neutron Solar panel(Avaritia)", "Storage", 40000000D).getDouble(40000000D);
			percent_output = config.get("Modules", "percent output", 10).getInt(10);
			percent_storage = config.get("Modules", "percent storage", 10).getInt(10);
			percent_day = config.get("Modules", "percent generation day", 10).getInt(10);
			percent_night = config.get("Modules", "percent generation night", 10).getInt(10);
			Storagequantumsuit = config.get("Battery", "MaxEnergy", 100000000).getInt(100000000);
			tier3_MFSU = config.get("Advanced MFSU", "tier", 6).getInt(6);
			registerDraconicPanels = config.get("Draconic Integration", "Register Draconic Panels", true).getBoolean(true);
			registerChaosArmour = config.get("Draconic Integration", "Register Chaos Armour", true).getBoolean(true);
			registerChaosFluxCapacitor = config.get("Draconic Integration", "Register Chaos Flux Capacitor", true).getBoolean(true);
			registerChaosDestructionStaff = config.get("Draconic Integration", "Register Chaos Destruction Staff", true).getBoolean(true);
			registerChaosPickaxe = config.get("Draconic Integration", "Register Chaos Pickaxe", true).getBoolean(true);
			registerChaosShovel = config.get("Draconic Integration", "Register Chaos Shovel", true).getBoolean(true);
			registerChaosSword = config.get("Draconic Integration", "Register Chaos Sword", true).getBoolean(true);
			registerChaosBow = config.get("Draconic Integration", "Register Chaos Bow", true).getBoolean(true);
			registerChaosAxe = config.get("Draconic Integration", "Register Chaos Axe", true).getBoolean(true);
			nightvision = config.get("Events","If player have quantum or nano or improvemed helmet and it was dressed and if player has coord y < 60 and skylight < 8,nightvision allow",true).getBoolean(true);
			disableeffect = config.get("Disable Effect", "Disable fireResistance", false).getBoolean(false);
			disableeffect1 = config.get("Disable Effect", "Disable waterBreathing", false).getBoolean(false);
			disableeffect2 = config.get("Disable Effect", "Disable jump", false).getBoolean(false);
			disableeffect3 = config.get("Disable Effect", "Disable moveSpeed", false).getBoolean(false);
			thaumcraft = config.get("Integrestion", "Integrestion Thaumcraft", false).getBoolean(false);
			wireless = config.get("Integrestion", "Integrestion Wireless Solar Panels", false).getBoolean(false);
			Draconic = config.get("Integrestion", "Integrestion Draconic Evolution", true).getBoolean(true);
			Botania = config.get("Integrestion", "Integrestion Botania", true).getBoolean(true);
			Avaritia = config.get("Integrestion", "Integrestion Avaritia", true).getBoolean(true);
			EnableEnchantingPlus= config.get("Integrestion", "Integrestion EnchantingPlus", true).getBoolean(true);
			EnableMineFactory= config.get("Integrestion", "Integrestion MineFactoryReloaded", true).getBoolean(true);
			advGenDay = config.get("general", "AdvancedSPGenDay", 10D).getDouble(10D);
			advGenNight = config.get("general", "AdvancedSPGenNight", 5D).getDouble(5D);
			advStorage = config.get("general", "AdvancedSPStorage", 3200D).getDouble(3200D);
			advOutput = config.get("general", "AdvancedSPOutput", 20D).getDouble(20D);
			hGenDay = config.get("general", "HybrydSPGenDay", 50D).getDouble(50D);
			hGenNight = config.get("general", "HybrydSPGenNight", 25D).getDouble(25D);
			hStorage = config.get("general", "HybrydSPStorage", 20000D).getDouble(20000D);
			hOutput = config.get("general", "HybrydSPOutput", 100D).getDouble(100D);
			uhGenDay = config.get("general", "UltimateHSPGenDay", 250D).getDouble(250D);
			uhGenNight = config.get("general", "UltimateHSPGenNight", 125D).getDouble(125D);
			uhStorage = config.get("general", "UltimateHSPStorage", 200000D).getDouble(200000D);
			uhOutput = config.get("general", "UltimateHSPOutput", 500D).getDouble(500D);
			qpGenDay = config.get("general", "QuantumSPGenDay", 1250D).getDouble(1250D);
			qpGenNight = config.get("general", "QuantumSPGenNight", 625D).getDouble(625D);
			qpStorage = config.get("general", "QuantumSPStorage", 1000000D).getDouble(1000000D);
			qpOutput = config.get("general", "QuantumSPOutput", 2500D).getDouble(2500D);
			TerrasteelRodHeat = config.get("TerrasteelRod", "Heat", 1).getInt(1);
			TerrasteelRodCells = config.get("TerrasteelRod", "Cells", 20000).getInt(20000);
			TerrasteelPower = config.get("TerrasteelRod", "Power", 2).getInt(2);
			toriyRodHeat = config.get("ToriyRod", "Heat", 1).getInt(1);
			toriyRodCells = config.get("ToriyRod", "Cells", 10000).getInt(10000);
			toriyPower = config.get("ToriyRod", "Power", 3).getInt(3);
			ProtonRodHeat = config.get("ProtonRod", "Heat", 1).getInt(1);
			ProtonRodCells = config.get("ProtonRod", "Cells", 30000).getInt(30000);
			ProtonPower = config.get("ProtonRod", "Power", 6).getInt(6);
			Radius = config.get("Iridium rotor", "Radius", 11).getInt(11);
			durability = config.get("Iridium rotor", "durability", 648000).getInt(648000);
			efficiency = config.get("Iridium rotor", "efficiency", 2.0F).getInt(2);
			minWindStrength = config.get("Iridium rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength = config.get("Iridium rotor", "maxWindStrength", 110).getInt(110);
			Radius1 = config.get("Compress Iridium rotor", "Radius", 11).getInt(11);
			durability1 = config.get("Compress Iridium rotor", "durability", 720000).getInt(720000);
			efficiency1 = config.get("Compress Iridium rotor", "efficiency", 3.0F).getInt(3);
			minWindStrength1 = config.get("Compress Iridium rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength1 = config.get("Compress Iridium rotor", "maxWindStrength", 110).getInt(110);
			Radius2 = config.get("Spectral rotor", "Radius", 11).getInt(11);
			durability2 = config.get("Spectral rotor", "durability", 172800).getInt(172800);
			efficiency2 = config.get("Spectral rotor", "efficiency", 4.0F).getInt((int) 4.0F);
			minWindStrength2 = config.get("Spectral rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength2 = config.get("Spectral rotor", "maxWindStrength", 110).getInt(110);
			Streak = config.get("Quantum Armor", "Allow Streak", true).getBoolean(true);
			Radius5 = config.get("Myphical rotor", "Radius", 11).getInt(11);
			durability5 = config.get("Myphical rotor", "durability", 345600).getInt(345600);
			efficiency5 = config.get("Myphical rotor", "efficiency", 5.0F).getInt((int) 5.0F);
			minWindStrength5 = config.get("Myphical rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength5 = config.get("Myphical rotor", "maxWindStrength", 110).getInt(110);
			Radius4 = config.get("Neutron rotor", "Radius", 11).getInt(11);
			durability4 = config.get("Neutron rotor", "durability", 2764800).getInt(2764800);
			efficiency4 = config.get("Neutron rotor", "efficiency", 7.0F).getInt((int) 7.0F);
			minWindStrength4 = config.get("Neutron rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength4 = config.get("Neutron rotor", "maxWindStrength", 110).getInt(110);
			Radius3 = config.get("Photon rotor", "Radius", 11).getInt(11);
			durability3 = config.get("Photon rotor", "durability", 691200).getInt(691200);
			efficiency3 = config.get("Photon rotor", "efficiency", 6.0F).getInt((int) 6.0F);
			minWindStrength3 = config.get("Photon rotor", "minWindStrength", 25).getInt(25);
			maxWindStrength3 = config.get("Photon rotor", "maxWindStrength", 110).getInt(110);
			limit = config.get("Unifier panels", "Limit", 2).getInt(2);
			manasteelgenday = config.get("Manasteel Solar Panel", "genday", 160D).getDouble(160D);
			manasteelgennight = config.get("Manasteel Solar Panel", "gennight", 80D).getDouble(80D);
			manasteelstorage = config.get("Manasteel Solar Panel", "storage", 100000D).getDouble(100000D);
			manasteeloutput = config.get("Manasteel Solar Panel", "output", 320D).getDouble(320D);
			manasteeltier = config.get("Manasteel Solar Panel", "tier", 3).getInt(3);
			elementiumgenday = config.get("Elementium Solar Panel", "genday", 1280D).getDouble(1280D);
			elementiumgennight = config.get("Elementium Solar Panel", "gennight", 320D).getDouble(320D);
			elementiumstorage = config.get("Elementium Solar Panel", "storage", 100000D).getDouble(100000D);
			elementiumoutput = config.get("Elementium Solar Panel", "output", 2560D).getDouble(2560D);
			elementiumtier = config.get("Elementium Solar Panel", "tier", 4).getInt(4);
			terasteelgenday = config.get("Terasteel Solar Panel", "genday", 10240D).getDouble(10240D);
			terasteelgennight = config.get("Terasteel Solar Panel", "gennight", 2560D).getDouble(2560D);
			terasteelstorage = config.get("Terasteel Solar Panel", "storage", 200000D).getDouble(200000D);
			terasteeloutput = config.get("Terasteel Solar Panel", "output", 20480D).getDouble(20480D);
			terasteeltier = config.get("Terasteel Solar Panel", "tier", 5).getInt(5);
			draconicgenday = config.get("Draconic Solar Panel", "genday", 40D).getDouble(40D);
			draconicgennight = config.get("Draconic Solar Panel", "gennight", 10D).getDouble(10D);
			draconicstorage = config.get("Draconic Solar Panel", "storage", 10000D).getDouble(10000D);
			draconicoutput = config.get("Draconic Solar Panel", "output", 80D).getDouble(80D);
			draconictier = config.get("Draconic Solar Panel", "tier", 2).getInt(2);
			awakenedgenday = config.get("Awakaned Solar Panel", "genday", 163840D).getDouble(163840D);
			awakenedgennight = config.get("Awakaned Solar Panel", "gennight", 81920D).getDouble(81920D);
			awakenedstorage = config.get("Awakaned Solar Panel", "storage", 10000000D).getDouble(10000000D);
			awakenedoutput = config.get("Awakaned Solar Panel", "output", 327680D).getDouble(327680D);
			awakenedtier = config.get("Awakaned Solar Panel", "tier", 7).getInt(7);
			chaosgenday = config.get("Chaos Solar Panel", "genday", 1310720D).getDouble(1310720D);
			chaosgennight = config.get("Chaos Solar Panel", "gennight", 1310720D).getDouble(1310720D);
			chaosstorage = config.get("Chaos Solar Panel", "storage", 50000000D).getDouble(50000000D);
			chaosoutput = config.get("Chaos Solar Panel", "output", 2621440D).getDouble(2621440D);
			chaostier = config.get("Chaos Solar Panel", "tier", 10).getInt(10);
			ASP = config.get("Integrestion", "Integrestion Advanced Solar Panels", true).getBoolean(true);
			armor_maxcharge = config.get("Improvemed Quantum Armor", "maxcharge exept Improvemed Quantum Body", 100000000).getInt(100000000);
			armor_transferlimit = config.get("Improvemed Quantum Armor", "transferlimit", 10000).getInt(10000);
			armor_tier = config.get("Improvemed Quantum Armor", "tier", 4).getInt(4);
			armor_maxcharge_body = config.get("Improvemed Quantum Armor", "maxcharge Improvemed Quantum Body", 300000000).getInt(300000000);
			
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			config.save();
		}
	}

}
