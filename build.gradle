buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.4.3"
group= "com.Denfop"
archivesBaseName = "SuperSolarPanels"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

dependencies {
  
      compile files("libs/industrialcraft-2-2.2.827-experimental.jar")
    compile files("libs/CodeChickenLib-1.7.10-1.1.1.93-universal.jar")
    compile files("libs/NotEnoughItems-1.7.10-1.0.5.120-universal.jar")
    compile files("libs/Avaritia-1.13.jar")
    compile files("libs/Draconic-Evolution-1.7.10-1.0.2h.jar")
    compile files("libs/Thaumcraft-1.7.10-4.2.3.5.jar")
    compile files("libs/wireless-panels+improved-vajra-0.42R.jar")
    compile files("libs/Botania r1.8-249.jar")
    

}
processResources
{
 
    
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
       
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
   
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}
jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "ijo42",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"Denfop",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit-Hash": getGitHash()
        ])
    }
    from 'LICENSE'
}

static def getGitHash() {
    try {
        def process = 'git rev-parse --short HEAD'.execute()
        process.waitFor()
        return (process.exitValue() ? 'unknown' : process.text.trim())
    }catch(IOException ignored){
        return 'unknown'
    }
}